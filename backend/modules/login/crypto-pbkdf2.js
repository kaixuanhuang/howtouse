/**
 * Created by huangsihuan on 2016/11/20.
 */
'use strict';

var crypto = require('crypto');
/**
 * Hash a password using Node's asynchronous pbkdf2 (key derivation) function.
 *
 * Returns a self-contained buffer which can be arbitrarily encoded for storage
 * that contains all the data needed to verify a password.
 *
 * @param {!String} password
 * @param {!function(?Error, ?Buffer=)} callback
 */
exports.hashPassword = function(password, callback) {
    // generate a salt for pbkdf2
    crypto.randomBytes(parseInt(process.env.crypt_saltBytes), function(err, salt) {
        if (err) {
            return callback(err);
        }

        var bSalt = salt.toString('base64').slice(0, parseInt(process.env.crypt_saltBytes));
        crypto.pbkdf2(password, bSalt, parseInt(process.env.crypt_iterations), parseInt(process.env.crypt_hashBytes), 'SHA1',
            function(err, hash) {

                if (err) {
                    return callback(err);
                }

                var bHash = new Buffer(hash, 'binary').toString('base64');
                var combined = 'pbkdf2$'+bSalt+'$'+process.env.crypt_iterations+'$'+process.env.crypt_hashBytes+'$'+bHash;

                callback(null, combined);
            });
    });
}

/**
 * Verify a password using Node's asynchronous pbkdf2 (key derivation) function.
 *
 * Accepts a hash and salt generated by hashPassword, and returns whether the
 * hash matched the password (as a boolean).
 *
 * @param {!String} password
 * @param {!Buffer} combined Buffer containing hash and salt as generated by
 *   hashPassword.
 * @param {!function(?Error, !boolean)}
 */
exports.verifyPassword = function(password, combined, callback) {
    if (password == '') return callback('No Password');
    if (combined == '' || typeof combined != 'string') return callback('Bad Database Hash!');

    var hash = combined.split('$');

    // verify the salt and hash against the password
    crypto.pbkdf2(password, hash[1], parseInt(hash[2]), parseInt(hash[3]), 'SHA1', function(err, verify) {
        if (err) return callback(err, false);
        if (verify == '') return callback('Cannot verify password.');

        callback(null, new Buffer(verify, 'binary').toString('base64') === hash[4]);
    });
}
